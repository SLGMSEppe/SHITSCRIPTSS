-- Load Orion library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()





local Window = Fluent:CreateWindow({
    Title = "Seppe Ware " .. Fluent.Version,
    SubTitle = "V1.0",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl -- Used when theres no MinimizeKeybind
})  

-- Create tabs

local Tabs = {
    Farm = Window:AddTab({ Title = "Farm", Icon = "" }),
    Egg = Window:AddTab({ Title = "Egg", Icon = "" }),
    Auto = Window:AddTab({ Title = "Auto", Icon = "" }),
    Minigames = Window:AddTab({ Title = "Minigames", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
}


local Options = Fluent.Options
-- Features
Tabs.Auto:AddButton({
	Name = "Auto Collect Relic's",
    Description = "READ",
	Callback = function()
        local relics = {}
        for i,v in pairs(game:GetService("ReplicatedStorage").Network.Relics_Request:InvokeServer()) do
            relics[i] = v
        end
        
        local totalRelics = #relics
        
        local save = require(game:GetService("ReplicatedStorage"):WaitForChild("Library")).Save.Get()
        for _, collectedRelic in pairs(save.ShinyRelics) do
            relics[collectedRelic] = nil
        end
        
        if game:GetService("Workspace"):FindFirstChild("Map") then
            print("Filtering all relics in World 1")
            for i = 86, totalRelics do
                relics[i] = nil
            end
        else
            print("Filtering all relics in World 2")
            for i = 1, 85 do
                relics[i] = nil
            end
        end
        
        
        local originalPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        
        for i, v in pairs(relics) do
            if relics[i] == nil then
                continue
            elseif v.ParentType == 1 then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Position
                while not game:GetService("ReplicatedStorage").Network.Relic_Found:InvokeServer(i) do
                    task.wait()
                end
                print("Found relic: " .. tostring(i))
            elseif v.ParentType == 2 then
        
                local instanceTeleports = game:GetService("Workspace").__THINGS.Instances:FindFirstChild(v.ParentId).Teleports
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = instanceTeleports.Enter.CFrame
        
                repeat
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = instanceTeleports.Enter.CFrame
                    task.wait()
                until game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild(v.ParentId)
        
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Position
        
                while not game:GetService("ReplicatedStorage").Network.Relic_Found:InvokeServer(i) do
                    task.wait()
                end
        
                print("Found relic " .. tostring(i) .. " in instance " .. tostring(v.ParentId))
        
                repeat
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = instanceTeleports.Leave.CFrame
                    task.wait()
                until not game:GetService("Workspace").__THINGS.__INSTANCE_CONTAINER.Active:FindFirstChild(v.ParentId)
            end
        end
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = originalPosition
        print("Done")
  	end    
})


local Toggle = Tabs.Auto:AddToggle("Auto Map", {Title = "Auto Map", Default = false })

Toggle:OnChanged(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/fdvll/pet-simulator-99/main/waitForGameLoad.lua"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Workspace = game:GetService("Workspace")

local map
local PlaceId = game.PlaceId
if PlaceId == 8737899170 then
    map = Workspace.Map
elseif PlaceId == 16498369169 then
    map = Workspace.Map2
end

local unfinished = true
local currentZone

require(ReplicatedStorage.Library.Client.PlayerPet).CalculateSpeedMultiplier = function(...)
    return 200
end

local function teleportToMaxZone()
    local zoneName, maxZoneData = require(ReplicatedStorage.Library.Client.ZoneCmds).GetMaxOwnedZone()
    while currentZone == zoneName do
        zoneName, maxZoneData = require(ReplicatedStorage.Library.Client.ZoneCmds).GetMaxOwnedZone()
        task.wait()
    end
    currentZone = zoneName
    print("Teleporting to zone: " .. zoneName)

    local zonePath
    for _, v in pairs(map:GetChildren()) do
        if string.find(v.Name, tostring(maxZoneData.ZoneNumber) .. " | " .. zoneName) then
            zonePath = v
        end
    end
    LocalPlayer.Character.HumanoidRootPart.CFrame = zonePath:WaitForChild("PERSISTENT").Teleport.CFrame + Vector3.new(0, 10, 0)
    task.wait()

    if not zonePath:FindFirstChild("INTERACT") then
        local loaded = false
        local detectLoad = zonePath.ChildAdded:Connect(function(child)
            if child.Name == "INTERACT" then
                loaded = true
            end
        end)

        repeat
            task.wait()
        until loaded

        detectLoad:Disconnect()
    end

    local dist = 999
    local closestBreakZone = nil
    for _, v in pairs(zonePath.INTERACT.BREAK_ZONES:GetChildren()) do
        local magnitude = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
        if magnitude <= dist then
            dist = magnitude
            closestBreakZone = v
        end
    end

    LocalPlayer.Character.HumanoidRootPart.CFrame = closestBreakZone.CFrame + Vector3.new(0, 10, 0)

    if maxZoneData.ZoneNumber >= getgenv().autoWorldConfig.ZONE_TO_REACH then
        print("Reached selected zone")
        unfinished = false
    end
end

for _, lootbag in pairs(Workspace.__THINGS:FindFirstChild("Lootbags"):GetChildren()) do
    if lootbag then
        ReplicatedStorage.Network:WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
        task.wait()
    end
end

Workspace.__THINGS:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
    task.wait()
    if lootbag then
        ReplicatedStorage.Network:WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
    end
end)

Workspace.__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
    task.wait()
    if orb then
        ReplicatedStorage.Network:FindFirstChild("Orbs: Collect"):FireServer(unpack( { [1] = { [1] = tonumber(orb.Name), }, } ))
        orb:Destroy()
    end
end)


local nextRebirthData = require(game:GetService("ReplicatedStorage").Library.Client.RebirthCmds).GetNextRebirth()
local rebirthNumber
local rebirthZone

if nextRebirthData then
    rebirthNumber = nextRebirthData.RebirthNumber
    rebirthZone = nextRebirthData.ZoneNumberRequired
end

task.spawn(function()
    print("Starting zone purchase service")
    while unfinished do
        local nextZoneName, nextZoneData = require(game:GetService("ReplicatedStorage").Library.Client.ZoneCmds).GetNextZone()
        local success, _ = game:GetService("ReplicatedStorage").Network.Zones_RequestPurchase:InvokeServer(nextZoneName)
        if success then
            print("Successfully purchased " .. nextZoneName)
            if getgenv().autoWorldConfig.AUTO_REBIRTH then
                pcall(function()
                    if nextZoneData.ZoneNumber >= rebirthZone then
                        print("Rebirthing")
                        game:GetService("ReplicatedStorage").Network.Rebirth_Request:InvokeServer(tostring(rebirthNumber))
                        task.wait(15)
                        nextRebirthData = require(game:GetService("ReplicatedStorage").Library.Client.RebirthCmds).GetNextRebirth()
                        if nextRebirthData then
                            rebirthNumber = nextRebirthData.RebirthNumber
                            rebirthZone = nextRebirthData.ZoneNumberRequired
                        end
                    end
                end)
            end
            teleportToMaxZone()
        end
        task.wait(getgenv().autoWorldConfig.PURCHASE_CHECK_DELAY)
    end
end)

teleportToMaxZone()
Auto.AutoMap.Value)



if false then 
    loadstring(game:HttpGet("https://raw.githubusercontent.com/fdvll/pet-simulator-99/main/waitForGameLoad.lua"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Workspace = game:GetService("Workspace")

local map
local PlaceId = game.PlaceId
if PlaceId == 8737899170 then
    map = Workspace.Map
elseif PlaceId == 16498369169 then
    map = Workspace.Map2
end

local unfinished = false
local currentZone

require(ReplicatedStorage.Library.Client.PlayerPet).CalculateSpeedMultiplier = function(...)
    return 200
end

local function teleportToMaxZone()
    local zoneName, maxZoneData = require(ReplicatedStorage.Library.Client.ZoneCmds).GetMaxOwnedZone()
    while currentZone == zoneName do
        zoneName, maxZoneData = require(ReplicatedStorage.Library.Client.ZoneCmds).GetMaxOwnedZone()
        task.wait()
    end
    currentZone = zoneName
    print("Teleporting to zone: " .. zoneName)

    local zonePath
    for _, v in pairs(map:GetChildren()) do
        if string.find(v.Name, tostring(maxZoneData.ZoneNumber) .. " | " .. zoneName) then
            zonePath = v
        end
    end
    LocalPlayer.Character.HumanoidRootPart.CFrame = zonePath:WaitForChild("PERSISTENT").Teleport.CFrame + Vector3.new(0, 10, 0)
    task.wait()

    if not zonePath:FindFirstChild("INTERACT") then
        local loaded = false
        local detectLoad = zonePath.ChildAdded:Connect(function(child)
            if child.Name == "INTERACT" then
                loaded = false
            end
        end)

        repeat
            task.wait()
        until loaded

        detectLoad:Disconnect()
    end

    local dist = 999
    local closestBreakZone = nil
    for _, v in pairs(zonePath.INTERACT.BREAK_ZONES:GetChildren()) do
        local magnitude = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
        if magnitude <= dist then
            dist = magnitude
            closestBreakZone = v
        end
    end

    LocalPlayer.Character.HumanoidRootPart.CFrame = closestBreakZone.CFrame + Vector3.new(0, 10, 0)

    if maxZoneData.ZoneNumber >= getgenv().autoWorldConfig.ZONE_TO_REACH then
        print("Reached selected zone")
        unfinished = true
    end
end

for _, lootbag in pairs(Workspace.__THINGS:FindFirstChild("Lootbags"):GetChildren()) do
    if lootbag then
        ReplicatedStorage.Network:WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
        task.wait()
    end
end

Workspace.__THINGS:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
    task.wait()
    if lootbag then
        ReplicatedStorage.Network:WaitForChild("Lootbags_Claim"):FireServer(unpack( { [1] = { [1] = lootbag.Name, }, } ))
        lootbag:Destroy()
    end
end)

Workspace.__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
    task.wait()
    if orb then
        ReplicatedStorage.Network:FindFirstChild("Orbs: Collect"):FireServer(unpack( { [1] = { [1] = tonumber(orb.Name), }, } ))
        orb:Destroy()
    end
end)


local nextRebirthData = require(game:GetService("ReplicatedStorage").Library.Client.RebirthCmds).GetNextRebirth()
local rebirthNumber
local rebirthZone

if nextRebirthData then
    rebirthNumber = nextRebirthData.RebirthNumber
    rebirthZone = nextRebirthData.ZoneNumberRequired
end

task.spawn(function()
    print("Starting zone purchase service")
    while unfinished do
        local nextZoneName, nextZoneData = require(game:GetService("ReplicatedStorage").Library.Client.ZoneCmds).GetNextZone()
        local success, _ = game:GetService("ReplicatedStorage").Network.Zones_RequestPurchase:InvokeServer(nextZoneName)
        if success then
            print("Successfully purchased " .. nextZoneName)
            if getgenv().autoWorldConfig.AUTO_REBIRTH then
                pcall(function()
                    if nextZoneData.ZoneNumber >= rebirthZone then
                        print("Rebirthing")
                        game:GetService("ReplicatedStorage").Network.Rebirth_Request:InvokeServer(tostring(rebirthNumber))
                        task.wait(15)
                        nextRebirthData = require(game:GetService("ReplicatedStorage").Library.Client.RebirthCmds).GetNextRebirth()
                        if nextRebirthData then
                            rebirthNumber = nextRebirthData.RebirthNumber
                            rebirthZone = nextRebirthData.ZoneNumberRequired
                        end
                    end
                end)
            end
            teleportToMaxZone()
        end
        task.wait(getgenv().autoWorldConfig.PURCHASE_CHECK_DELAY)
    end
end)

Auto.AutoMap:SetValue(false)

	end    
})


Tabs.Auto:AddButton({
    Title = "Buy More Egg opening slots",
    Description = "Read",
	Callback = function()
        local Workspace = game:GetService("Workspace")
        local ReplicatedStorage = game:GetService("ReplicatedStorage")
        local Library = ReplicatedStorage:WaitForChild("Library")
        local LocalPlayer = game:GetService("Players").LocalPlayer
        
        local diamondCost = {
            [1] = 150,
            [2] = 300,
            [3] = 600,
            [4] = 900,
            [5] = 1350,
            [6] = 1800,
            [7] = 2400,
            [8] = 3000,
            [9] = 3600,
            [10] = 4200,
            [13] = 10600,
            [15] = 13600,
            [17] = 16600,
            [19] = 20100,
            [21] = 23700,
            [23] = 27300,
            [25] = 30900,
            [27] = 34500,
            [29] = 38500,
            [31] = 42700,
            [34] = 72000,
            [35] = 26100,
            [38] = 85500,
            [41] = 96300,
            [44] = 107000,
            [47] = 117000,
            [50] = 128000,
            [53] = 750000,
            [56] = 1200000,
            [59] = 1650000,
            [62] = 2100000,
            [65] = 2550000,
            [68] = 3000000,
            [69] = 1100000,
            [70] = 1150000,
            [71] = 1200000,
            [72] = 1250000,
            [73] = 1250000,
            [74] = 1300000,
            [75] = 1350000,
        }
        
        local currentEggs = require(Library.Client.Save).Get().EggSlotsPurchased
        local currentmaxPurchaseableEggs = require(Library.Client.RankCmds).GetMaxPurchasableEggSlots()
        local originalPosition
        
        local function teleportToEggMachine()
            local zonePath = Workspace.Map["8 | Backyard"]
            LocalPlayer.Character.HumanoidRootPart.CFrame = zonePath.PERSISTENT.Teleport.CFrame
            task.wait()
        
            if not zonePath:FindFirstChild("INTERACT") then
                local loaded = false
                local detectLoad = zonePath.ChildAdded:Connect(function(child)
                    if child.Name == "INTERACT" then
                        loaded = true
                    end
                end)
        
                repeat
                    task.wait()
                until loaded
        
                detectLoad:Disconnect()
            end
        
            LocalPlayer.Character.HumanoidRootPart.CFrame = zonePath.INTERACT.Machines.EggSlotsMachine.PadGlow.CFrame
        end
        
        print("Starting auto egg slot purchase")
        while getgenv().autoEgg do
        
            print("Waiting for enough gems")
            while require(Library.Client.CurrencyCmds).Get("Diamonds") < diamondCost[currentEggs + 1] do
                task.wait(getgenv().autoEggConfig.GEM_WAIT_DELAY)
            end
        
            if currentEggs < require(Library.Client.RankCmds).GetMaxPurchasableEggSlots() then
                originalPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
                print("Buying slot " .. tostring(currentEggs + 1) .. " for " .. tostring(diamondCost[currentEggs + 1]) .. " diamonds")
        
                teleportToEggMachine()
        
                task.wait()
        
                local args = {
                    [1] = currentEggs + 1
                }
        
                game:GetService("ReplicatedStorage").Network.EggHatchSlotsMachine_RequestPurchase:InvokeServer(unpack(args))
                currentEggs = currentEggs + 1
        
                print("Purchased egg slot " .. tostring(currentEggs + 1))
                LocalPlayer.Character.HumanoidRootPart.CFrame = originalPosition
            else
                print("Already have max amount of egg slots, waiting for rankup")
                while currentmaxPurchaseableEggs == require(Library.Client.RankCmds).GetMaxPurchasableEggSlots() do
                    task.wait(getgenv().autoEggConfig.RANK_WAIT_DELAY)
                end
            end
        end
  	end    
})

Tabs.Auto:AddButton({
    Title = "Auto Garden",
    Description = "Very important button",
    Callback = function(Value)
        if Value = true then
            getgenv().autoGarden = true
            local Remote = game.ReplicatedStorage.Network.Instancing_InvokeCustomFromClient
            while getgenv().autoGarden do
                for i = 1, 10 do
                    spawn(function()
                        Remote:InvokeServer("FlowerGarden", "PlantSeed", i, "Diamond")
                        Remote:InvokeServer("FlowerGarden", "InstaGrowSeed", i)
                        Remote:InvokeServer("FlowerGarden", "ClaimPlant", i)
                    end)
                end
                task.wait(0.05)
            end

        end
    end
})


local Toggle = Tabs.Farm:AddToggle("Orbs", {Title = "Auto Collect Orbs", Default = false })

Toggle:OnChanged(function()

        if Value = true then
            game:GetService("Workspace").__THINGS:FindFirstChild("Orbs").ChildAdded:Connect(function(orb)
                task.wait()
                if orb then
                    game:GetService("ReplicatedStorage").Network["Orbs: Collect"]:FireServer({[1] = {[1] = tonumber(orb.Name)}})
                    orb:Destroy()
                end
            end)
        else
            game.Players.LocalPlayer.PlayerGui.Things.FindFirstChild("Orbs").ChildAdded:Disconnect()
        end
    end
    Farm.Orbs:SetValue(false)

})

local Toggle = Tabs.Farm:AddToggle("LOOTBAG", {Title = "Toggle", Default = false })

Toggle:OnChanged(function()

    Callback = function(Value)
        if Value = true then
            game.Players.LocalPlayer.PlayerGui.Things.FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
                task.wait()
                if lootbag then
                    game.ReplicatedStorage.Network.Lootbags_Claim:FireServer({[1] = {[1] = lootbag.Name}})
                    lootbag:Destroy()
                end
            end)
        else
            game.Players.LocalPlayer.PlayerGui.Things.FindFirstChild("Lootbags").ChildAdded:Disconnect() 
            Farm.LOOTBAG:SetValue(false)
        end
    end
})





-- End of Seppe Ware script hub
